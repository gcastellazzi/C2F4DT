{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cloud2FEMi \u2014 Developer Guide","text":"<p>Welcome to the Cloud2FEMi developer documentation. This site collects guidelines, code architecture, theory, and an auto-generated API reference.</p> <p></p>"},{"location":"#about-cloud2femi","title":"About Cloud2FEMi","text":"<p>Cloud2FEMi is an open-source software tool designed to bridge the gap between 3D point cloud data and finite element method (FEM) models. It enables researchers and engineers to efficiently process point clouds obtained from various scanning technologies and convert them into high-quality FEM meshes for structural analysis and simulation. Developed in the context of structural health monitoring and civil engineering, Cloud2FEMi facilitates advanced modeling workflows by automating key steps from raw data to simulation-ready models.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Import and preprocess 3D point clouds from multiple formats</li> <li>Slice point clouds into meaningful cross-sections</li> <li>Generate centroids and polygons to represent structural elements</li> <li>Create grids and finite element meshes for structural analysis</li> <li>Define boundary conditions (BCs) and load cases</li> <li>Visualize point clouds, meshes, and simulation results within the tool</li> </ul>"},{"location":"#publications","title":"Publications","text":"<p>Cloud2FEMi and its underlying methodologies have been described and validated in several key publications:</p> <ul> <li>Cloud2FEM: A finite element mesh generator based on point clouds of existing/historical structures. Castellazzi, G., et al. (2022). SoftwareX.</li> <li>An innovative numerical modeling strategy for the structural analysis of historical monumental buildings. Castellazzi, G., et al. (2017). Engineering Structures.</li> <li>From Laser Scanning to Finite Element Analysis of Complex Buildings by Using a Semi-Automatic Procedure. Castellazzi, G., et al. (2015). Sensors.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin exploring Cloud2FEMi, we recommend reviewing the following sections:</p> <ul> <li>Installation</li> <li>Overview</li> <li>Theory &amp; Equations</li> <li>Architecture</li> <li>Flowchart</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code># Local preview\npip install mkdocs-material \"mkdocstrings[python]\" pymdown-extensions\nmkdocs serve\n</code></pre>"},{"location":"#goals","title":"Goals","text":"<ul> <li>Documentation that is easy to evolve during development (Markdown + MathJax)</li> <li>Always up-to-date Python API via mkdocstrings</li> <li>Automatic deploy to GitHub Pages</li> </ul>"},{"location":"api/","title":"API Index","text":""},{"location":"guide/architecture/","title":"Code Architecture","text":""},{"location":"guide/architecture/#package-layout-indicative","title":"Package layout (indicative)","text":"<pre><code>cloud2fem/\n  ui/             # Qt .ui files and PySide6 widgets for user interface\n  viz/            # Viewer interface and PyVista/VTK backend for visualization\n  io/             # Input/output operations, import/export of point clouds and models\n  model/          # Finite Element Model construction and representation\n  ops/            # Core processing operations such as slicing, clustering, and feature extraction\n  grid/           # Grid and mesh generation for FEM modeling\n  tools/          # Utility scripts and command-line tools for various tasks\n  utils/          # Helper functions and common utilities across the project\n  native/         # Native extensions and bindings for performance-critical code\nexamples/\n  run_app.py      # Minimal launcher\n</code></pre>"},{"location":"guide/architecture/#conventions","title":"Conventions","text":"<ul> <li>Docstrings: Google or NumPy style</li> <li>Clear names for Qt signals/slots and viewer methods</li> <li>Add lightweight tests where feasible</li> <li>Code style: Follow PEP8 guidelines for Python code formatting</li> <li>Typing: Use type hints consistently for function signatures</li> <li>Logging: Employ Python\u2019s logging module for runtime information and debugging</li> <li>Separation of concerns: Maintain modularity by separating UI, logic, and data handling</li> <li>Testing strategy: Write unit and integration tests; place tests alongside modules or in a dedicated <code>tests/</code> directory</li> </ul>"},{"location":"guide/code_tree/","title":"Code Tree","text":"<p>This page shows a depth-limited, clickable tree of the <code>cloud2fem</code> package. Links point to the corresponding API pages generated at build time.</p> <p>Root: <code>cloud2fem/</code> (depth \u2264 5)</p> <ul> <li>core/<ul> <li><code>__init__.py</code></li> </ul> </li> <li>executables/</li> <li>extensions/<ul> <li>example_hello/<ul> <li><code>__init__.py</code></li> <li>example_hello.py</li> </ul> </li> <li>fem/<ul> <li><code>__init__.py</code></li> <li>fem_extension.py</li> </ul> </li> <li>slices_vis/<ul> <li><code>__init__.py</code></li> <li>slices_vis_extension.py</li> </ul> </li> </ul> </li> <li>grid/<ul> <li><code>__init__.py</code></li> <li>grid_model.py</li> </ul> </li> <li>io/<ul> <li><code>__init__.py</code></li> <li>pcl.py</li> </ul> </li> <li>model/<ul> <li><code>__init__.py</code></li> <li>mct_model.py</li> <li>types.py</li> </ul> </li> <li>native/<ul> <li>normalcalc/<ul> <li>build/<ul> <li>CMakeFiles/<ul> <li>3.25.0/<ul> <li>CompilerIdCXX/</li> </ul> </li> <li>CMakeScratch/</li> <li>normalcalc.dir/</li> <li>pkgRedirects/</li> </ul> </li> </ul> </li> <li><code>__init__.py</code></li> <li>rand_generation.py</li> </ul> </li> <li><code>__init__.py</code></li> </ul> </li> <li>ops/<ul> <li>legacy/<ul> <li><code>slices_ex.py</code></li> </ul> </li> <li><code>__init__.py</code></li> <li>contours.py</li> <li>contours_pipeline.py</li> <li>contours_utility.py</li> <li>geometry.py</li> <li>normals.py</li> <li>slice_options.py</li> <li>slices.py</li> </ul> </li> <li>plugins/<ul> <li><code>__init__.py</code></li> <li>api.py</li> <li>manager.py</li> </ul> </li> <li>processing/<ul> <li><code>__init__.py</code></li> </ul> </li> <li>tools/<ul> <li>normals/<ul> <li><code>__init__.py</code></li> <li>runner.py</li> </ul> </li> <li><code>__init__.py</code></li> </ul> </li> <li>ui/<ul> <li>dialogs/<ul> <li><code>__init__.py</code></li> <li>grid_dialog.py</li> </ul> </li> <li>resources/<ul> <li>icons/</li> <li><code>__init__.py</code></li> <li>resources_rc.py</li> </ul> </li> <li>utils/<ul> <li><code>helpers.py</code></li> </ul> </li> <li>viewers/<ul> <li><code>__init__.py</code></li> <li>pyvista_backend.py</li> <li>viewer.py</li> </ul> </li> <li>widgets/<ul> <li><code>__init__.py</code></li> <li>embed.py</li> <li><code>slices2d_window.py</code></li> </ul> </li> <li><code>__init__.py</code></li> <li>console_widget.py</li> <li>main_window.py</li> <li>main_window_OLD.py</li> <li>programmatic_ui_demo.py</li> <li>qt_paths.py</li> <li>slices_options_dialog.py</li> </ul> </li> <li>utils/<ul> <li><code>__init__.py</code></li> <li>logging.py</li> <li>metrics.py</li> <li>replay_logger.py</li> <li>traceflow.py</li> </ul> </li> <li>viz/<ul> <li>backends/</li> <li><code>__init__.py</code></li> <li>overlays.py</li> </ul> </li> <li><code>__init__.py</code></li> <li><code>__main__.py</code></li> <li>app.py</li> </ul>"},{"location":"guide/flowchart/","title":"Flowchart","text":""},{"location":"guide/flowchart/#flowchart-of-main-components","title":"Flowchart of main components","text":"<p>The following Mermaid flowchart illustrates the main components and data flow within the Cloud2FEMi application, covering GUI elements, data input/output, processing steps, data models, grid and FEM generation, visualization overlays, and optional tools.</p> <pre><code>flowchart TD\n  %% Grouped by responsibility\n  subgraph \"GUI / UX\"\n    A1[\"Main Window (PySide6) \u2014 cloud2fem.ui.main_window\"]\n    A2[\"3D Viewer (PyVista/VTK) \u2014 cloud2fem.ui.viewers.viewer\"]\n    A3[\"2D Slice Window \u2014 cloud2fem.ui.viewers.pyvista_backend\"]\n  end\n\n  subgraph \"I/O\"\n    B1[\"Point Cloud Import/Export \u2014 cloud2fem.io.pcl\"]\n    B2[\"Boundary Conditions Export \u2014 cloud2fem.io.bcs\"]\n  end\n\n  subgraph \"Data Model\"\n    C1[\"TwinState / SliceSet / Slice \u2014 cloud2fem.model.types\"]\n    C2[\"Materials &amp; Boundary Conditions \u2014 cloud2fem.model.types\"]\n  end\n\n  subgraph \"Processing\"\n    D1[\"Create Slices \u2014 cloud2fem.ops.slices\"]\n    D2[\"Centroid &amp; Feature Extraction \u2014 cloud2fem.ops.geometry\"]\n    D3[\"Normals Estimation \u2014 cloud2fem.ops.normals\"]\n  end\n\n  subgraph \"Grid &amp; FEM\"\n    E1[\"Grid Model \u2014 cloud2fem.grid.grid_model\"]\n    E2[\"FEM Generation / Export \u2014 (placeholder)\"]\n  end\n\n  subgraph \"Visualization\"\n    F1[\"2D Overlays (Points / Labels) \u2014 cloud2fem.viz.overlays\"]\n    F2[\"3D Overlays (Points / Labels) \u2014 cloud2fem.viz.overlays_3d\"]\n  end\n\n  subgraph \"Optional Tools\"\n    G1[\"Additional Utilities \u2014 cloud2fem.tools.optional\"]\n  end\n  ```\n\n\n```mermaid\n  A1 --&gt;|Open / Load| B1\n  B1 --&gt;|NDArray + Channels| C1\n  A1 --&gt;|Slice Parameters| D1\n  D1 --&gt;|SliceSet| C1\n  D1 --&gt;|Indices per Slice| D2\n  D2 --&gt;|Centroids / Polylines / Polygons| C1\n  A1 --&gt;|Compute Normals| D3\n  D3 --&gt;|Normals Channel| C1\n  C1 --&gt;|Slice Polygons| E1\n  E1 --&gt;|Slice-Aligned Grid| E2\n  C2 --&gt;|Attach BCs| E2\n  C2 --&gt;|Export BCs| B2\n  C1 --&gt;|Derived Layers| A2\n  F1 --&gt;|Points / Legend| A2\n  F2 --&gt;|3D Points / Legend| A2\n  A1 --&gt;|Open 2D View| A3\n  C1 --&gt;|Slice Layers| A3\n  G1 --&gt;|Optional Utilities| A1\n</code></pre>"},{"location":"guide/gui_layout/","title":"Cloud2FEMi \u2014 GUI Layout (Qt Object Names)","text":"<p>This document provides a structured overview of the main GUI elements in Cloud2FEMi, focusing on Qt <code>objectName</code>s to assist developers when wiring widgets, signals, and extensions.</p>"},{"location":"guide/gui_layout/#cloud2femi-gui-layout-tree-view","title":"Cloud2FEMi \u2014 GUI Layout (Tree View)","text":"<pre><code>MainWindow (QMainWindow)\n\u2502\n\u251c\u2500\u2500 Menu bar (menubar)\n\u2502\n\u251c\u2500\u2500 Toolbars\n\u2502   \u251c\u2500\u2500 barTOPCOMMAND              # Top horizontal toolbar\n\u2502   \u251c\u2500\u2500 barVERTICALCOMMAND_left    # Left vertical toolbar\n\u2502   \u251c\u2500\u2500 barVERTICALCOMMAND_right   # Right vertical toolbar\n\u2502   \u2514\u2500\u2500 barVIEWER3D                # Small toolbar inside 3D viewer\n\u2502\n\u251c\u2500\u2500 Central area\n\u2502   \u251c\u2500\u2500 tabMain (QTabWidget)            # Main tab container\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tabDisplay (QWidget)            # Tab: Display\n\u2502   \u2502   \u2514\u2500\u2500 scrollDISPLAY_CONTENT       # Scrollable content area for Display\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tabSLICING (QWidget)            # Tab: Slices\n\u2502   \u2502   \u2514\u2500\u2500 scrollSLICING_CONTENT       # Scrollable content area for Slices\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tabFEM (QWidget)                # Tab: FEM / Mesh\n\u2502   \u2502   \u2514\u2500\u2500 scrollFEM_CONTENT           # Scrollable content area for FEM\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tabRESULTS (QWidget)            # Tab: Results\n\u2502   \u2502   \u2514\u2500\u2500 scrollRESULTS_CONTENT       # Scrollable content area for Results\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tabINSPECTOR (QWidget)          # Tab: Inspector / Tree\n\u2502   \u2502   \u2514\u2500\u2500 treeMCT (QTreeWidget)       # Main MCT tree\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 tabCONSOLE (QTabWidget)         # Console tab (can host multiple pages)\n\u2502       \u2514\u2500\u2500 (page \"Console\") \u2192 layout with custom console widget\n\u2502\n\u251c\u2500\u2500 3D Viewer Panel\n\u2502   \u2514\u2500\u2500 VIEWER3D (QWidget, QVBoxLayout)\n\u2502       \u251c\u2500\u2500 barVIEWER3D (QToolBar)      # Viewer toolbar\n\u2502       \u2514\u2500\u2500 (placeholder \u2192 replaced by QtInteractor for PyVista)\n\u2502\n\u251c\u2500\u2500 Secondary Trees / Data\n\u2502   \u2514\u2500\u2500 treeMCTS (QTreeWidget)          # Optional: second dataset tree\n\u2502\n\u251c\u2500\u2500 Status bar area\n\u2502   \u251c\u2500\u2500 barPROGRESS (QProgressBar)      # Progress indicator\n\u2502   \u2514\u2500\u2500 buttonCANCEL (QPushButton)      # Cancel action\n\u2502\n\u2514\u2500\u2500 Messages\n    \u2514\u2500\u2500 txtMessages (QPlainTextEdit)    # Log / messages output\n</code></pre>"},{"location":"guide/gui_layout/#1-main-window-structure","title":"1. Main Window Structure","text":"<ul> <li>QMainWindow</li> <li>Top toolbar \u2192 <code>barTOPCOMMAND</code></li> <li>Left vertical toolbar \u2192 <code>barVERTICALCOMMAND_left</code></li> <li>Right vertical toolbar \u2192 <code>barVERTICALCOMMAND_right</code></li> <li>Viewer 3D area \u2192 <code>VIEWER3D</code><ul> <li>Contains toolbar \u2192 <code>barVIEWER3D</code></li> </ul> </li> <li>Message log \u2192 <code>txtMessages</code></li> <li>Progress bar \u2192 <code>barPROGRESS</code></li> <li>Cancel button \u2192 <code>buttonCANCEL</code></li> <li>Tabs (main) \u2192 <code>tabMain</code></li> </ul>"},{"location":"guide/gui_layout/#2-tab-pages-and-containers","title":"2. Tab Pages and Containers","text":"<ul> <li>Display tab \u2192 <code>tabDisplay</code></li> <li>Scroll container: <code>scrollDISPLAY_CONTENT</code></li> <li>Slices tab \u2192 <code>tabSLICING</code></li> <li>Scroll container: <code>scrollSLICING_CONTENT</code></li> <li>FEM tab \u2192 <code>tabFEM</code></li> <li>Scroll container: <code>scrollFEM_CONTENT</code></li> <li>Results tab \u2192 <code>tabRESULTS</code></li> <li>Scroll container: <code>scrollRESULTS_CONTENT</code></li> <li>Inspector tab \u2192 <code>tabINSPECTOR</code></li> <li>Tree widget: <code>treeMCT</code></li> <li>Console tab \u2192 <code>tabCONSOLE</code></li> <li>Replaces placeholder with console widget</li> <li>MCTS tab \u2192 <code>tabMCTS</code></li> <li>Tree widget: <code>treeMCTS</code></li> </ul>"},{"location":"guide/gui_layout/#3-actions-and-menus","title":"3. Actions and Menus","text":"<ul> <li>File:</li> <li><code>actionNew</code>, <code>actionOpen</code>, <code>actionSave</code>, <code>actionSaveAs</code></li> <li>Import cloud:</li> <li><code>actionImportCloud</code></li> <li>Grid tools:</li> <li><code>actionCreateGrid</code>, <code>actionToggleGrid</code></li> <li>Normals:</li> <li><code>actionToggleNormals</code></li> <li>Tab navigation:</li> <li><code>actionOpen_Display_Tab</code></li> <li><code>actionOpen_Slices_Tab</code></li> <li><code>actionOpen_FEM_Tab</code></li> <li><code>actionOpen_Inspector_Tab</code></li> <li><code>actionOpen_2dView</code></li> </ul>"},{"location":"guide/gui_layout/#4-slice-visualization-actions","title":"4. Slice Visualization Actions","text":"<ul> <li><code>toggle_current_slice_3D_view</code></li> <li><code>toggle_all_slices_3D_view</code></li> <li><code>toggle_centroids_view</code></li> <li><code>toggle_polylines_view</code></li> <li><code>toggle_polygons_view</code></li> <li><code>toggle_mesh_view</code></li> </ul>"},{"location":"guide/gui_layout/#abbreviated-map-cheat-sheet","title":"Abbreviated Map (Cheat Sheet)","text":"Area Object name(s) Top toolbar <code>barTOPCOMMAND</code> Left toolbar <code>barVERTICALCOMMAND_left</code> Right toolbar <code>barVERTICALCOMMAND_right</code> Viewer container <code>VIEWER3D</code> Viewer toolbar <code>barVIEWER3D</code> Message editor <code>txtMessages</code> Progress bar <code>barPROGRESS</code> Cancel button <code>buttonCANCEL</code> Tabs root <code>tabMain</code> Display container <code>scrollDISPLAY_CONTENT</code> Slicing container <code>scrollSLICING_CONTENT</code> FEM container <code>scrollFEM_CONTENT</code> Results container <code>scrollRESULTS_CONTENT</code> Inspector tree <code>treeMCT</code> MCTS tree <code>treeMCTS</code> Console tab <code>tabCONSOLE</code>"},{"location":"guide/gui_layout/#quick-reference-for-slice-tools","title":"Quick reference for slice tools:","text":"<ul> <li>Current slice overlay: <code>toggle_current_slice_3D_view</code></li> <li>All slices overlay: <code>toggle_all_slices_3D_view</code></li> <li>Centroids: <code>toggle_centroids_view</code></li> <li>Polylines: <code>toggle_polylines_view</code></li> <li>Polygons: <code>toggle_polygons_view</code></li> <li>Mesh: <code>toggle_mesh_view</code></li> </ul>"},{"location":"guide/installation/","title":"Installation and Setup","text":""},{"location":"guide/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Version 3.11 or later.</li> <li>IDE: Visual Studio Code is recommended.</li> <li>Git: Either Git (command line) or GitHub Desktop.</li> </ul>"},{"location":"guide/installation/#creating-a-virtual-environment-in-vs-code","title":"Creating a Virtual Environment in VS Code","text":"<ol> <li>Open the Cloud2FEMi folder in VS Code.</li> <li>Open the terminal (`Ctrl+``).</li> <li>Create a virtual environment:    <pre><code>python -m venv .venv\n</code></pre></li> <li>Activate the environment:</li> <li>On macOS/Linux:      <pre><code>source .venv/bin/activate\n</code></pre></li> <li>On Windows:      <pre><code>.venv\\Scripts\\activate\n</code></pre></li> </ol> <p>VS Code should auto-detect the <code>.venv</code>. If not, select it manually (<code>Python: Select Interpreter</code>).</p>"},{"location":"guide/installation/#installing-packages","title":"Installing Packages","text":"<p>Once the environment is active, install dependencies: <pre><code>pip install --upgrade pip\npip install -r requirements.txt\n</code></pre></p> <p>For development mode: <pre><code>pip install -e .[dev]\n</code></pre></p>"},{"location":"guide/installation/#running-the-application","title":"Running the Application","text":"<ul> <li>To launch the main app:   <pre><code>python -m cloud2fem\n</code></pre></li> <li>Or run example scripts:   <pre><code>python examples/run_app.py\n</code></pre></li> </ul>"},{"location":"guide/installation/#version-control-with-git","title":"Version Control with Git","text":""},{"location":"guide/installation/#cloning-the-repository","title":"Cloning the Repository","text":"<pre><code>git clone https://github.com/gcastellazzi/Cloud2FEMi.git\ncd Cloud2FEMi\n</code></pre> <p>If using GitHub Desktop, choose \u201cClone repository\u201d and paste the repo URL.</p>"},{"location":"guide/installation/#creating-a-branch","title":"Creating a Branch","text":"<p>Always create a feature branch before editing: <pre><code>git checkout -b feature/my-change\n</code></pre></p>"},{"location":"guide/installation/#making-commits","title":"Making Commits","text":"<ul> <li>Keep commits small and focused.</li> <li>Use descriptive messages:   <pre><code>git commit -m \"fix: corrected normals orientation in slice viewer\"\n</code></pre></li> <li>Do not commit:</li> <li><code>.venv/</code></li> <li>large datasets</li> <li>build artifacts</li> </ul> <p>Make sure <code>.gitignore</code> includes <code>.venv/</code>, <code>__pycache__/</code>, and <code>site/</code>.</p>"},{"location":"guide/installation/#pushing-changes","title":"Pushing Changes","text":"<pre><code>git push origin feature/my-change\n</code></pre> <p>Then open a Pull Request on GitHub.</p>"},{"location":"guide/overview/","title":"Overview","text":"<p>This guide describes project goals, scope, and current status.</p> <ul> <li>Repository: <code>Cloud2FEMi</code></li> <li>Python package: <code>cloud2fem</code></li> <li>Viewer: PyVista/VTK + PySide6</li> <li>Scope: point-cloud import, slicing, inspection, GUI, and Cloud\u2192FEM pipeline</li> </ul>"},{"location":"guide/overview/#project-goals-and-significance","title":"Project Goals and Significance","text":"<p>Cloud2FEMi aims to provide a comprehensive and user-friendly software framework to facilitate the processing of point-cloud data for finite element method (FEM) analysis. The project focuses on enabling efficient import, slicing, inspection, and conversion of complex 3D point clouds into FEM models, streamlining the workflow from raw data acquisition to structural analysis.</p> <p>Key goals include:</p> <ul> <li>Developing a robust pipeline for processing and slicing large-scale point clouds.</li> <li>Integrating advanced visualization tools for inspection and validation of data.</li> <li>Providing a graphical user interface (GUI) that simplifies interaction with the pipeline.</li> <li>Extending existing methodologies into a modern, Python-based framework that supports extensibility and ease of use.</li> </ul> <p>The significance of Cloud2FEMi lies in its ability to bridge the gap between raw 3D scanning data and engineering simulations, facilitating more accurate and efficient structural assessments and designs.</p>"},{"location":"guide/overview/#scope","title":"Scope","text":"<ul> <li>Importing and managing diverse point-cloud datasets.</li> <li>Implementing slicing algorithms to extract meaningful cross-sections.</li> <li>Enabling detailed inspection and visualization through PyVista and VTK.</li> <li>Integrating a GUI based on PySide6 for enhanced user experience.</li> <li>Automating the pipeline from point-cloud data to FEM-ready models.</li> </ul>"},{"location":"guide/overview/#relevant-published-works","title":"Relevant Published Works","text":"<p>Cloud2FEMi builds upon a series of foundational methodologies developed and published by Castellazzi and colleagues:</p> <ul> <li>Cloud2FEM: A finite element mesh generator based on point clouds of existing/historical structures. Castellazzi, G., et al. (2022). SoftwareX.</li> <li>An innovative numerical modeling strategy for the structural analysis of historical monumental buildings. Castellazzi, G., et al. (2017). Engineering Structures.</li> <li>From Laser Scanning to Finite Element Analysis of Complex Buildings by Using a Semi-Automatic Procedure. Castellazzi, G., et al. (2015). Sensors.</li> </ul> <p>These works establish the theoretical and practical background for the techniques implemented in Cloud2FEMi.</p>"},{"location":"guide/overview/#note","title":"Note","text":"<p>Cloud2FEMi extends these established methodologies by integrating them into a modern Python-based software framework, featuring a graphical user interface built with PySide6 and visualization capabilities powered by VTK/PyVista. This integration enhances usability, flexibility, and accessibility for researchers and practitioners in the field. </p> <p>Project status</p> <p>Under development - not a stable release.</p>"},{"location":"guide/plugins_developer_guide/","title":"Cloud2FEMi \u2014 Plugin/Extensions Developer Guide","text":"<p>This guide shows how to build drop-in extensions for Cloud2FEMi without touching <code>main_window.py</code>. Extensions live in the <code>./extensions/</code> folder and are loaded automatically at startup.</p>"},{"location":"guide/plugins_developer_guide/#tldr","title":"TL;DR","text":"<ul> <li>Create a folder under <code>extensions/your_plugin/</code></li> <li>Add a small <code>extension.json</code> manifest</li> <li>Provide a Python module with a factory <code>create_extension()</code> that returns an object implementing:</li> <li><code>name: str</code>, <code>version: str</code></li> <li><code>activate(ctx: HostContext) -&gt; None</code></li> <li><code>deactivate() -&gt; None</code></li> </ul>"},{"location":"guide/plugins_developer_guide/#1-folder-layout","title":"1) Folder layout","text":"<pre><code>extensions/\n  your_plugin/\n    extension.json\n    __init__.py\n    your_plugin.py\n</code></pre> <p>Example <code>extension.json</code>: <pre><code>{\n  \"name\": \"My Plugin\",\n  \"package\": \"your_plugin\",\n  \"entry\": \"create_extension\",\n  \"version\": \"1.0.0\",\n  \"requires_api\": \"1.0\"\n}\n</code></pre></p> <ul> <li><code>package</code>: python module (filename without <code>.py</code>)</li> <li><code>entry</code>: factory function returning the extension instance</li> <li><code>requires_api</code>: host API version your plugin expects</li> </ul>"},{"location":"guide/plugins_developer_guide/#2-host-api-what-you-get","title":"2) Host API (what you get)","text":"<p>Extensions receive a <code>HostContext</code> at <code>activate()</code>:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Any\n\n@dataclass\nclass HostContext:\n    window: Any                 # MainWindow (QMainWindow)\n    registry: dict[str, Any]    # Shared services registry\n    add_tab: callable           # add_tab(title, widget, target=\"main\")\n    log: callable               # log(level, message)\n</code></pre> <ul> <li>Use <code>ctx.add_tab(widget_title, widget, target=\"main\")</code> to add whole tabs to <code>tabMain</code>.</li> <li>Access existing content panels with:</li> <li><code>scrollDISPLAY_CONTENT</code>, <code>scrollSLICING_CONTENT</code>, <code>scrollFEM_CONTENT</code>, <code>scrollRESULTS_CONTENT</code></li> <li>Store persistent UI prefs in <code>ctx.window.view_opts</code> (a dict), e.g., <code>view_opts[\"slice_point_size\"]</code>.</li> </ul> <p>Stability: the host exposes <code>APP_PLUGIN_API_VERSION</code> to gate incompatible plugins.</p>"},{"location":"guide/plugins_developer_guide/#3-minimal-plugin-template","title":"3) Minimal plugin template","text":"<pre><code># extensions/your_plugin/your_plugin.py\nfrom __future__ import annotations\nfrom typing import Optional\nfrom PySide6 import QtWidgets\nfrom cloud2fem.plugins.api import HostContext\n\nclass MyPlugin:\n    name = \"My Plugin\"\n    version = \"1.0.0\"\n\n    def __init__(self):\n        self._ctx: Optional[HostContext] = None\n        self._panel: Optional[QtWidgets.QGroupBox] = None\n\n    def activate(self, ctx: HostContext) -&gt; None:\n        self._ctx = ctx\n        ctx.log(\"INFO\", \"Activating My Plugin\")\n\n        # 1) Create UI\n        container = ctx.window.findChild(QtWidgets.QWidget, \"scrollDISPLAY_CONTENT\")\n        if container is None:\n            ctx.log(\"WARN\", \"scrollDISPLAY_CONTENT not found\")\n            return\n\n        self._panel = QtWidgets.QGroupBox(\"My Plugin Panel\", container)\n        form = QtWidgets.QFormLayout(self._panel)\n\n        btn = QtWidgets.QPushButton(\"Do something\", self._panel)\n        btn.clicked.connect(self._on_click)\n        form.addRow(btn)\n\n        # 2) Mount into the panel container\n        lay = container.layout() or QtWidgets.QVBoxLayout(container)\n        lay.addWidget(self._panel)\n\n    def deactivate(self) -&gt; None:\n        if self._ctx and self._panel:\n            self._panel.setParent(None)\n            self._panel.deleteLater()\n        self._panel = None\n        self._ctx = None\n\n    def _on_click(self):\n        self._ctx.log(\"INFO\", \"Button clicked!\")\n\ndef create_extension():\n    return MyPlugin()\n</code></pre> <p>Prefer embedding controls inside existing <code>scrollXXX_CONTENT</code> containers for a cohesive UX. Use <code>ctx.add_tab(...)</code> if your feature needs a dedicated full tab.</p>"},{"location":"guide/plugins_developer_guide/#4-ui-targets-object-names","title":"4) UI targets &amp; object names","text":"<p>Common insertion points (object names):</p> <ul> <li>Display: <code>scrollDISPLAY_CONTENT</code></li> <li>Slices: <code>scrollSLICING_CONTENT</code></li> <li>FEM: <code>scrollFEM_CONTENT</code></li> <li>Results: <code>scrollRESULTS_CONTENT</code></li> </ul> <p>Adding toolbar actions is allowed (use <code>ctx.window.menuBar()</code> or find toolbars by name), but keep toolbar minimal and consistent.</p>"},{"location":"guide/plugins_developer_guide/#5-reading-setting-view-options","title":"5) Reading &amp; setting view options","text":"<p>Use <code>ctx.window.view_opts</code> to store simple preferences:</p> <pre><code>v = getattr(ctx.window, \"view_opts\", {}) or {}\nv[\"myplugin_threshold\"] = 0.25\nctx.window.view_opts = v\n</code></pre> <p>Renderers (3D viewer, etc.) can read those values to affect visualization. Example keys used by the Slices visualization extension:</p> <ul> <li><code>slice_point_size</code> / <code>slice_point_color</code> (all slices)</li> <li><code>slice_current_point_size</code> / <code>slice_current_point_color</code> (current slice)</li> </ul>"},{"location":"guide/plugins_developer_guide/#6-integrating-with-existing-logic-optional","title":"6) Integrating with existing logic (optional)","text":"<p>If you need to sync with host behavior, you can look up helpful widgets or actions:</p> <ul> <li><code>cbSliceIndex</code> (<code>QComboBox</code>): current slice index</li> <li><code>toggle_current_slice_3D_view</code> / <code>toggle_all_slices_3D_view</code> (<code>QAction</code>)</li> </ul> <p>Prefer host-agnostic logic; call internal helpers only when necessary and available.</p>"},{"location":"guide/plugins_developer_guide/#7-logging-messages","title":"7) Logging &amp; messages","text":"<ul> <li>Use <code>ctx.log(\"INFO\", \"message\")</code> for plugin logs.</li> <li>For user-facing messages, use the host\u2019s message area:   <pre><code>txt = ctx.window.findChild(QtWidgets.QPlainTextEdit, \"txtMessages\")\nif txt:\n    txt.appendPlainText(\"[MyPlugin] Something happened\u2026\")\n</code></pre></li> </ul>"},{"location":"guide/plugins_developer_guide/#8-versioning-compatibility","title":"8) Versioning &amp; compatibility","text":"<ul> <li>Set <code>requires_api</code> in <code>extension.json</code>.</li> <li>When the host bumps <code>APP_PLUGIN_API_VERSION</code>, incompatible plugins are skipped.</li> <li>Keep your plugin\u2019s <code>version</code> in sync with your changes.</li> </ul>"},{"location":"guide/plugins_developer_guide/#9-testing-checklist","title":"9) Testing checklist","text":"<ul> <li> No crashes if target containers are missing (fail gracefully).</li> <li> No global state required; clean up in <code>deactivate()</code>.</li> <li> Works with/without a loaded point cloud.</li> <li> Honors dark theme where possible (avoid hard-coded colors).</li> <li> No blocking calls on the UI thread for long operations.</li> </ul>"},{"location":"guide/plugins_developer_guide/#10-packaging-distribution","title":"10) Packaging &amp; distribution","text":"<ul> <li>Ship your plugin folder (<code>your_plugin/</code>) as a zip; users unzip into <code>./extensions/</code>.</li> <li>Avoid heavy dependencies; if needed, handle absence gracefully.</li> <li>Keep names unique to avoid clashes.</li> </ul>"},{"location":"guide/plugins_developer_guide/#11-advanced-tips","title":"11) Advanced tips","text":"<ul> <li>Hot reload (dev): add a host command to call <code>plugin_manager.unload_all(); plugin_manager.load_all()</code>.</li> <li>Shared services: use <code>ctx.registry</code> to publish/reuse services between plugins.</li> <li>Targeted tabs: the host\u2019s <code>add_tab</code> supports <code>target=\"main\"</code> and can be extended for additional tab stacks.</li> </ul>"},{"location":"guide/theory/","title":"Theory &amp; Equations","text":""},{"location":"guide/theory/#motivation-and-significance","title":"Motivation and Significance","text":"<p>This section provides the theoretical framework underlying the Cloud2FEMi software, which aims to facilitate the conversion of point cloud data into finite element meshes. The motivation stems from the need to bridge the gap between experimental or simulated data represented as point clouds and numerical analysis tools requiring structured meshes. By automating this conversion, the software enhances the efficiency and accuracy of computational modeling workflows in engineering and scientific applications.</p>"},{"location":"guide/theory/#software-description","title":"Software Description","text":"<p>Cloud2FEMi processes 3D point cloud data to generate finite element meshes suitable for simulation. The software incorporates algorithms for voxelization, geometry reconstruction, and mesh generation. It supports various input formats and allows customization of voxel tolerance and slicing parameters to adapt to different data characteristics and modeling requirements.</p>"},{"location":"guide/theory/#workflow-and-equations-under-development","title":"Workflow and Equations (Under development)","text":"<p>The core workflow involves several key steps:</p> <ol> <li>Voxelization: The point cloud is discretized into voxels, with voxel size controlled by a tolerance parameter ( \\epsilon ). This parameter defines the maximum allowed distance between points within a voxel:</li> </ol> <p>[ \\epsilon = \\max_{i,j} | \\mathbf{p}_i - \\mathbf{p}_j |, \\quad \\mathbf{p}_i, \\mathbf{p}_j \\in \\text{voxel} ]</p> <ol> <li>Centroid Calculation and Slicing: For each voxel, the centroid ( \\mathbf{c} ) is computed to represent the voxel's position:</li> </ol> <p>[ \\mathbf{c} = \\frac{1}{N} \\sum_{i=1}^N \\mathbf{p}_i ]</p> <p>where ( N ) is the number of points in the voxel. The point cloud is then sliced along specified axes to facilitate mesh generation layers.</p> <ol> <li>Mesh Generation: Using the voxel centroids and slices, a finite element mesh is constructed. The mesh respects the geometry defined by the voxelized data and ensures element quality suitable for numerical simulations.</li> </ol> <p>These steps collectively enable the transformation from raw point cloud data to a structured mesh, ready for finite element analysis.</p>"},{"location":"guide/contribute/code_of_conduct/","title":"Code of Conduct","text":"<p>This project has adopted the Contributor Covenant Code of Conduct, version 2.1.</p>"},{"location":"guide/contribute/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone.</p>"},{"location":"guide/contribute/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment include: - Using welcoming and inclusive language - Being respectful of differing viewpoints - Gracefully accepting constructive criticism - Focusing on what is best for the community - Showing empathy towards others</p> <p>Examples of unacceptable behavior include: - Trolling, insulting/derogatory comments, and personal attacks - Public or private harassment - Publishing others\u2019 private information without explicit permission</p>"},{"location":"guide/contribute/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team.</p>"},{"location":"guide/contribute/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at: https://www.contributor-covenant.org/version/2/1/code_of_conduct/</p>"},{"location":"guide/contribute/development_workflows/","title":"Development workflows","text":""},{"location":"guide/contribute/development_workflows/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a feature branch</li> <li>Implement code with clear docstrings</li> <li>Update pages in <code>docs/guide/</code></li> <li><code>mkdocs serve</code> for local preview</li> <li>Open a PR with screenshots/gifs when helpful</li> </ol>"},{"location":"guide/contribute/development_workflows/#docstring-style-google","title":"Docstring style (Google)","text":"<pre><code>def compute_normals(points, k=16):\n    \"\"\"Compute normals for a point cloud.\n\n    Args:\n        points (ndarray): (N, 3) array of XYZ.\n        k (int): Neighborhood size.\n\n    Returns:\n        ndarray: (N, 3) array of normals.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"guide/contribute/development_workflows/#processing-workflow","title":"Processing Workflow","text":"<p>The processing workflow in Cloud2FEMi consists of the following 10 steps:</p> <ol> <li> <p>Point Cloud Import    Load the raw point cloud data (e.g., from LiDAR or photogrammetry) into the system.</p> </li> <li> <p>Slice Creation    Divide the point cloud into slices, typically along a chosen axis, to simplify further processing.</p> </li> <li> <p>Centroid Generation    Compute centroids for each slice, representing the central position of points within a slice.</p> </li> <li> <p>Polyline Generation    Connect centroids or selected points within each slice to form polylines that outline key features.</p> </li> <li> <p>Polygon Creation    Convert polylines into closed polygons to define cross-sectional shapes.</p> </li> <li> <p>Grid Generation    Generate a computational grid (mesh) within each polygon, suitable for FEM analysis.</p> </li> <li> <p>Grid Extrusion/Adaptation    Extrude or adapt the 2D grids into 3D elements, following the geometry of the original point cloud.</p> </li> <li> <p>FEM Generation    Assemble the full finite element model, assigning nodes and elements based on the extruded grid.</p> </li> <li> <p>Boundary Conditions and Export    Define boundary conditions and export the FEM model in a format ready for simulation.</p> </li> <li> <p>Visualization     Visualize the processed data and FEM model to verify geometry and mesh quality before simulation.</p> </li> </ol>"},{"location":"guide/contribute/guidelines/","title":"Contribution Guidelines","text":"<p>We welcome contributions from the community! Please follow these guidelines to ensure a smooth process.</p>"},{"location":"guide/contribute/guidelines/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the Repository on GitHub.</li> <li>Create a Branch for your changes:    <pre><code>git checkout -b feature/my-new-feature\n</code></pre></li> <li>Make Changes:</li> <li>Follow PEP8 coding standards.</li> <li>Use Google-style docstrings for all functions/classes.</li> <li>Add or update tests where applicable.</li> <li> <p>Update documentation in <code>docs/</code>.</p> </li> <li> <p>Commit Changes:</p> </li> <li>Use small, focused commits with descriptive messages.</li> <li> <p>Avoid committing generated files, <code>.venv/</code>, and large datasets.</p> </li> <li> <p>Push and Open a Pull Request:    <pre><code>git push origin feature/my-new-feature\n</code></pre>    Then open a Pull Request on the main repository.</p> </li> </ol>"},{"location":"guide/contribute/guidelines/#review-process","title":"Review Process","text":"<ul> <li>A maintainer will review your PR.</li> <li>Be open to comments and requested changes.</li> <li>Once approved, your PR will be merged.</li> </ul>"},{"location":"guide/contribute/guidelines/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use the GitHub Issues page to report bugs or request features.</li> <li>Provide context, logs, or screenshots if possible.</li> </ul>"}]}